<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Desarrollo web | Felipe Martín]]></title>
  <link href="http://blog.fmartingr.com/blog/categories/desarrollo-web/atom.xml" rel="self"/>
  <link href="http://blog.fmartingr.com/"/>
  <updated>2013-02-27T22:20:08+01:00</updated>
  <id>http://blog.fmartingr.com/</id>
  <author>
    <name><![CDATA[Felipe]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Policy de S3 para tener un bucket con acceso lectura público]]></title>
    <link href="http://blog.fmartingr.com/2012/11/23/policy-de-s3-para-tener-un-bucket-con-acceso-lectura-publico/"/>
    <updated>2012-11-23T11:36:42+01:00</updated>
    <id>http://blog.fmartingr.com/2012/11/23/policy-de-s3-para-tener-un-bucket-con-acceso-lectura-publico</id>
    <content type="html"><![CDATA[<p>Después de haber migrado el blog a un servicio PaaS -que ya comentaré en otra entrada-, tuve el problemilla de que el espacio en disco era volatil y tenía que guardar las imágenes y demás en un servidor o CDN a parte. Ya puestos, a tirar la casa por la ventana, decidí usar S3.</p>

<p>Creé un bucket que voy a usar como CDN a partir de ahora, pero trasteando vi que los permisos había que incluirlos por fichero, lo cual era un engorro. Investigando encontré las Policy, que son cadenas JSON puedes indicar propiedades a todo el Bucket.</p>

<p>Pues bien, para hacer un bucket público al completo lo que tenéis que poner en vuestras policy es esto:</p>

<p>``` javascript
{</p>

<pre><code>"Version": "2008-10-17",
"Statement": [{
    "Sid": "AllowPublicRead",
    "Effect": "Allow",
    "Principal": {
        "AWS": "*"
    },
    "Action": ["s3:GetObject"],
    "Resource": ["arn:aws:s3:::&lt;nombre del bucket&gt;/*"]
}]
</code></pre>

<p>}
```</p>

<p>Sustituís <nombre del bucket> por el nombre del vuestro y lo aplicáis. Con esto tendréis todo el contenido de vuestro bucket disponible para todo el mundo, pero si queréis ser más restrictivos y hacer pública solo una carpeta lo especificáis en el atributo Resource:</p>

<p><code>javascript
"Resource": ["arn:aws:s3:::&lt;nombre del bucket&gt;/&lt;carpeta&gt;/*"]
</code></p>

<p>Espero que os sirva de ayuda.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Organizar nuestros modelos de django en carpetas]]></title>
    <link href="http://blog.fmartingr.com/2012/06/28/organizar-nuestros-modelos-de-django-en-carpetas/"/>
    <updated>2012-06-28T06:23:14+02:00</updated>
    <id>http://blog.fmartingr.com/2012/06/28/organizar-nuestros-modelos-de-django-en-carpetas</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://cdn.fmartingr.com/blog/uploads/2012/06/django-model-folder-example.png">
Estaba yo aquí con mi insomnio habitual (¡y sin café de por medio!) trasteando con django un poco cuando me he dado cuenta de que mi ficherico <em>models.py</em> se me estaba haciendo <del>algo</del> muy incómodo de mantener, y yo que estaba pensando un poco que python es muy <em>másmola</em> y tal. Alguna manera ha de haber de mejorar esta cosa.</p>

<p>Pues bien, después de indagar un poco por internet y demás, ver algunas listas de correo he encontrado algo que me resulta bastante cómodo.</p>

<p>Pues bien, en mi caso dentro de la carpeta de mi app he creado otra llamada <strong>model</strong> -tengo la costumbre de usar la nomenclatura en singular-, y ahí un fichero .py por cada modelo y a su vez el modelo de la zona de administración.</p>

<p>¿Cómo hacemos funcionar bien algo así? Bien, primero en el <em>Meta</em> de nuestro modelo tenemos que añadir el app_label. Por defecto, django usa el nombre del paquete (HAHAHAHAHA) en el que están los modelos como etiqueta de app por defecto, por lo que como he metido los mios en un paquete llamado "model", usa eso de app_label, por lo que manualmente le he especificado el correcto:</p>

<p>``` python item.py
class Item(models.Model):</p>

<pre><code>#...
name = models.CharField(max_length=32)

class Meta:
    app_label = 'database'
    ordering = ['name']
</code></pre>

<p>```</p>

<p>A su vez, en el <code>models.py</code> incluímos todos nuestros modelos: <code>from model import *</code></p>

<p>Y para que esto funcione, hay que configurar nuestro paquetillo <em>models</em> e incluir en el todos los modelos que queramos que se autoimporten, por lo que así lo especificamos en nuestro <strong>APPNAME/model/<strong>init</strong>.py</strong>:</p>

<p>``` python app/model/<strong>init</strong>.py
from database.model.version import Version
from database.model.icon import Icon
from database.model.item import Item</p>

<p> <strong>all</strong> = ['Version', 'Icon', 'Item']
```</p>

<p>Mucho más simple de mantener que todo en el mismo fichero. La verdad que lo he agradecido mucho, espero que os sirva de ayuda.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jquery-phslider]]></title>
    <link href="http://blog.fmartingr.com/2012/04/21/jquery-phslider/"/>
    <updated>2012-04-21T12:47:08+02:00</updated>
    <id>http://blog.fmartingr.com/2012/04/21/jquery-phslider</id>
    <content type="html"><![CDATA[<p><img src="http://cdn.fmartingr.com/blog/uploads/2012/04/jquery-phslider-header.gif" alt="" /></p>

<p>Ayer me encontré en la situación de tener que crear un slider sencillo para un site y al terminarlo me di cuenta de que tal vez podía servirle a alguien, así que siguiendo el camino del <strong>open source</strong> he subido mi pequeña creación a github.</p>

<p>Se trata de un plugin de jquery para hacer sliders sencillos, con la "magia" de que se pueden seleccionar la animación y duración para cada slide independiente.</p>

<p>Toda la información la tenéis en el <em>readme</em> de github, tenéis los enlaces al final de la entrada.</p>

<p>\o7</p>

<p>P.S.: No sabía que poner de foto así que una captura de la demo y un texto con mis insane photoshop skillz.</p>

<p><strong>Github | </strong><a href="https://github.com/fmartingr/jquery-phslider">jquery-phslider</a>
<strong>Demo | </strong><a href="http://fmartingr.github.com/demo/jquery-phslider/">Ver</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Crear una imagen y su reflejo con HTML y CSS3]]></title>
    <link href="http://blog.fmartingr.com/2012/04/13/crear-una-imagen-y-su-reflejo-con-html-y-css3/"/>
    <updated>2012-04-13T01:10:36+02:00</updated>
    <id>http://blog.fmartingr.com/2012/04/13/crear-una-imagen-y-su-reflejo-con-html-y-css3</id>
    <content type="html"><![CDATA[<p><img src="http://cdn.fmartingr.com/blog/uploads/2012/04/css3-reflection.png" alt="Prueba de reflejo con CSS3" /></p>

<p><strong>Disclaimer:</strong> Se que esto no es una gran hazaña y que hay burradas de la leche con CSS3, que esto se podrá hacer de otra manera, etc. No soy diseñador, así que dejadme tranquilo. (XD)</p>

<p>Todo esto se me ocurrió ayer cuando estabamos revisando parte de los bocetos de una web, donde el diseño incluía una cabecera con una imagen y su reflejo. Dado que la imagen tenía que ser insertada por el usuario era totalmente inviable que el usuario lo crease de dicha manera, por lo que dije... ¿por qué no aprovechar los elemenos que nos brinda el movimiento HTML5?</p>

<p>Mentira. Lo primero que probé fue la cutrez de poner la altura de la imagen en negativo. Coño, igual colaba. Empecé a mirar por internet CSS3 y descubrí las transformaciones y los filtros (estos últimos para IE), y usando dichos atributos es posible voltear la imagen.</p>

<p><code>css
filter: FlipV;
-ms-filter: "FlipV";
-moz-transform: scaleY(-1);
-o-transform: scaleY(-1);
-webkit-transform: scaleY(-1);
transform: scaleY(-1);
</code></p>

<p>Perfecto, ¡punto uno conseguido! Ahora puedo tener las dos imagenes viviendo juntas con una volteada, ahora hay que darle un efectillo degradado a transparente. Sí, ¿qué es HTML5 a parte de bordes redondeados y sombras? Gradientes :D</p>

<p>Para ello en mi caso y el código que podreis ver luego en github, creé una capa con dos dentro, una la imagen volteada y el gradiente para que pille el efecto. Se me fue la olla pero se entiende por donde va el tema, asi que...</p>

<p>En mi caso es un degradado de sin opacidad a blanco, dado que blanco es el fondo de la web que yo uso.</p>

<p><code>css
/* FF3.6+ */
background: -moz-linear-gradient(top,
rgba(255,255,255,0.6) 0%,
rgba(255,255,255,1) 100%);
/* Chrome,Safari4+ */
background: -webkit-gradient(linear,
left top,
left bottom,
color-stop(0%,rgba(255,255,255,0.6)),
color-stop(100%,rgba(255,255,255,1)));
/* Chrome10+,Safari5.1+ */
background: -webkit-linear-gradient(top,
rgba(255,255,255,0.6) 0%,
rgba(255,255,255,1) 100%);
/* Opera 11.10+ */
background: -o-linear-gradient(top,
rgba(255,255,255,0.6) 0%,
rgba(255,255,255,1) 100%);
/* IE10+ */
background: -ms-linear-gradient(top,
rgba(255,255,255,0.6) 0%,
rgba(255,255,255,1) 100%);
/* W3C */
background: linear-gradient(top,
rgba(255,255,255,0.6) 0%,
rgba(255,255,255,1) 100%);
/* IE6-9 */
filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#99ffffff', endColorstr='#ffffff',GradientType=0 );
</code></p>

<p>Después de posicionar capas y demás os quedará el efecto que véis en la imagen de cabecera.</p>

<p>Como nota alternativa para cuando veáis lo de github: sí, se puede simplificar un montón, usar menos capas, ser más eficiente, etc etc etc. Esto es solo una muestra para que se pille el concepto.</p>

<p><strong>Código fuente de ejemplo |</strong> <a href="https://github.com/fmartingr/fmartingr.github.com/tree/master/blog/css3-reflection">Github</a> &amp; <a href="http://fmartingr.github.com/blog/css3-reflection/">Demo</a></p>

<p><strong>Gracias a |</strong> <a href="http://www.colorzilla.com/gradient-editor/">Ultimate CSS Gradient Generator</a> y <a href="http://css-tricks.com/snippets/css/flip-an-image/">CSS-Tricks - Flip an image</a></p>
]]></content>
  </entry>
  
</feed>
